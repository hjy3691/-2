%----------------------------------------------------------
function r = bairstow(p, eps, N)

n = size(p,2);
q = p;
r = zeros(1, n-1);

for i = 1:floor(n/2)
    ii = 1;
       if (size(q,2) <= 3)
           f = q;
           q = 0;
       else
           [q, f, ii] = quadratic_factor(q, eps, N);
       end
       
       if size(f,2) == 2
           r(2*i-1) = -f(2) / f(1);
       else
           disc = f(2)^2 - 4*f(1)*f(3);
           r(2*i-1) = (-f(2) - sqrt(disc)) / (2*f(1));
           r(2*i) = (-f(2) + sqrt(disc)) / (2*f(1));
       end
end

r = r';
disp(['Number of Iteration = ' num2str(ii)])
end
       
% Computes one quadratic factor of the polynomial p.
function [q,f,i] = quadratic_factor(p,eps,N)
%  Inputs :
%    p        coefficient vector of polynomial, size(p,2) > 2;
%   eps      accuracy requirement on the coefficients of result;
%    N       maximal numberof iterations;
% Output  :
%    q        coefficient vector of the quotient: p = q*f;
%    f         coefficient vector of a quadratic factor;

n = size(p,2);
r = rand;
s = rand;
for i = 1:N
   d = [1 -r -s];         %divisor
   [q1,r1] = deconv(p,d);
   b0 = r1(n) + r*r1(n-1);
   b1 = r1(n-1);
   p2 = [q1 b1 b0];
   [q2,r2] = deconv(p2,d);
   c1 = r2(n-1);          % define linear system
   c2 = q2(n-2);
   c3 = q2(n-3);
   a = [c2 c3; c1 c2];
   b = [-b1; -b0];
   drs = a\b;
   r = r + drs(1);
   s = s + drs(2);
   if ( norm(drs) < eps)
        break;
   end
end
q = q1;
f = d;
end