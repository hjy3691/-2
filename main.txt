clear all; close all;

syms s;

% --------예제 4--------- 정답 나옴
N = [-7 1]
D = [1 -2 -5 6];

% --------예제 5--------- 복잡하게 나온다
N = [1 0]
D = [1 1/4 5/4];

% --------예제 8--------- 정답 나옴
N = [4]
D = [1 -2 0 0];

% --------추가적으로 테스트해본 예제--------- 왜인지 정답이 잘 나온다. 
N = [1 -3]
D = [1 -4 3];
 
err = 1.0e-32;
Max = 1000;

r = roots(D);
ROOTS = bairstow(D, err, Max);
err = sort(r) - sort(ROOTS);


%%%%% 오차가 너무 심하여 중근을 확인하기 어려움을 발견
%%%%% 어쩔 수 없이 반올림 함수(round) 사용
for i = 1:length(ROOTS)
	ROOTS(i) = round(ROOTS(i), 4);
end

root = ROOTS;
number= zeros(size(root)); number = number + 1; % 중근의 개수 파악
len_r = length(root);

%%% 중복되는 근의 개수를 number에 개수로 저장 
for i = 1:len_r
	ii2 = i + 1;
	for i2 = i+1:len_r
		if(root(i) == root(ii2))	
			number(i) = number(i) + 1;
			root(ii2,:) = [];
			number(ii2,:) = [];
			len_r = length(root);
			ii2 = ii2 - 1;
		end
		ii2 = ii2 + 1;
	end
end


coef = [];
aa = 0;
bb = 0;
for i = 1:length(root)
	num = number(i);

	for i2 = 1:number(i)
		d = D;
		n = N;
		div = [1 -root(i)];
	
		for i3 = 1:number(i)
			[d, r] = deconv(d, div)
		end
		for i4 = 1:num-1
			[n, d] = polyder(n, d)
		end

		for i5 = 1:length(n)
			aa = aa + n(i5)*(root(i)^(length(n)-i5)) 
		end

		for i5 = 1:length(d)
			bb = bb + d(i5)*(root(i)^(length(d)-i5)) 
		end

		result = aa/bb;
		coef = [coef result]

		aa = 0;
		bb = 0;
		num = num - 1;
	end
end

coef_idx = 1;
final_result = 0;

for i = 1:length(root)
	for i2 = 1:number(i)
		f = coef(coef_idx)/(s - root(i))^i2
		final_result = final_result + ilaplace(f)
		coef_idx = coef_idx + 1;
	end
end